[uwsgi]
project = epg
http = :8081

base = /app
chdir = %(base)/%(project)

route = /static/(.*) static:%(base)/%(project)/static/$1
route = /download/(.*) static:%(base)/%(project)/download/$1
route = /favicon.ico static:%(base)/%(project)/static/favicon.ico

module=%(project).wsgi:application

master = true
pidfile = %(base)/%(project)/uwsgi/uwsgi.pid
# Django's wsgi file
# wsgi-file = %(base)/%(project)/epg/wsgi.py

# maximum number of worker processes
processes = 2
# thread numbers started in each worker process
threads = 2
# clear environment on exit
vacuum = true

# 后台运行,并输出日志
# daemonize = %(base)/%(project)/uwsgi/uwsgi.log

# 启用线程，允许用内嵌的语言启动线程
enable-threads = true

# 当服务停止的时候自动移除 unix Socket 和 pid 文件
vacuum = true

# 不记录信息日志，只记录错误以及 uwsgi 内部消息
# disable-logging = true

# 设置最大日志文件大小
# log-maxsize = 5242880

# 为每个工作进程设置请求数的上限。当一个工作进程处理的请求数达到这个值，那么该工作进程就会被回收重用（重启）
# 根据内存限制，建议每个进程处理 10,000 个请求后重启
max-requests = 5000

#当一个请求被harakiri杀掉会，会输出一条日志
harakiri = 60
# 如果http请求体的大小超过指定的限制，打开http body缓冲，这里为64k
post-buffering=65536

#设置工作进程使用虚拟内存超过多少MB就回收重启
reload-on-as=1024

#设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒)
reload-mercy=10

# 设置缓冲区大小，避免处理大请求时失败
buffer-size = 65535

# 防止僵尸进程
no-orphans = true

# 优化服务性能，减少内存碎片
thunder-lock = true
lazy-apps = true

# 优化线程处理，防止队列过载
cheap = true
